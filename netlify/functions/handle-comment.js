const { Telegraf } = require('telegraf');

exports.handler = async (event, context) => {
    // –†–∞–∑—Ä–µ—à–∞–µ–º CORS
    if (event.httpMethod === 'OPTIONS') {
        return {
            statusCode: 200,
            headers: {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Allow-Methods': 'POST'
            },
            body: ''
        };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥
    if (event.httpMethod !== 'POST') {
        return {
            statusCode: 405,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ error: 'Method Not Allowed' })
        };
    }

    try {
        const comment = JSON.parse(event.body);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!comment.newsId || !comment.author || !comment.text) {
            return {
                statusCode: 400,
                headers: { 
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                body: JSON.stringify({ error: 'Missing required fields' })
            };
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        await bot.telegram.sendMessage(
            process.env.TELEGRAM_CHAT_ID,
            `üìù –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n\n` +
            `üìå –°—Ç–∞—Ç—å—è: ${comment.newsId}\n` +
            `üë§ –ê–≤—Ç–æ—Ä: ${comment.author}\n` +
            `üí¨ –¢–µ–∫—Å—Ç: ${comment.text}\n\n` +
            `‚è≥ –í—Ä–µ–º—è: ${new Date().toLocaleString()}`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_${comment.newsId}` },
                            { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${comment.newsId}` }
                        ]
                    ]
                }
            }
        );

        return {
            statusCode: 200,
            headers: { 
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            body: JSON.stringify({ success: true, message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é' })
        };

    } catch (error) {
        return {
            statusCode: 500,
            headers: { 
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            body: JSON.stringify({ error: error.message })
        };
    }
};