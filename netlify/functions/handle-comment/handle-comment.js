const { Telegraf } = require('telegraf');

exports.handler = async (event) => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
    if (event.httpMethod !== 'POST') {
        return {
            statusCode: 405,
            body: JSON.stringify({ 
                success: false,
                error: 'Method Not Allowed',
                message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'
            })
        };
    }

    try {
        // –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        const comment = JSON.parse(event.body);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!comment.newsId || !comment.author || !comment.text) {
            return {
                statusCode: 400,
                body: JSON.stringify({
                    success: false,
                    error: '–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                    message: '–£–∫–∞–∂–∏—Ç–µ newsId, author –∏ text'
                })
            };
        }

        // –î–æ–±–∞–≤–ª—è–µ–º timestamp –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!comment.timestamp) {
            comment.timestamp = new Date().toISOString();
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
        comment.status = 'pending';

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        await bot.telegram.sendMessage(
            process.env.TELEGRAM_CHAT_ID,
            `üì® –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:\n\n` +
            `üìù –°—Ç–∞—Ç—å—è: ${comment.newsId}\n` +
            `üë§ –ê–≤—Ç–æ—Ä: ${comment.author}\n` +
            `üí¨ –¢–µ–∫—Å—Ç: ${comment.text}\n\n` +
            `‚è≥ ${new Date(comment.timestamp).toLocaleString()}`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { 
                                text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', 
                                callback_data: `approve_${comment.newsId}_${comment.timestamp}`
                            },
                            { 
                                text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 
                                callback_data: `reject_${comment.newsId}_${comment.timestamp}`
                            }
                        ]
                    ]
                }
            }
        );

        // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        return {
            statusCode: 200,
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
                success: true,
                message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é'
            })
        };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handle-comment:', error);
        
        return {
            statusCode: 500,
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
                success: false,
                error: error.message,
                message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'
            })
        };
    }
};